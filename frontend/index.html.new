<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CWRU Marketplace MVP</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .page-section { display: none; }
        .active-page { display: block; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
        ::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #555; }
        .page-section { animation: fadeIn 0.5s; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .item-card-image { aspect-ratio: 4 / 3; object-fit: cover; width: 100%; height: 100%; }
        .clamp-lines-3 { overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; }
        #imagePreview, #editImagePreview { max-width: 200px; max-height: 200px; margin-top: 10px; border-radius: 0.375rem; border: 1px solid #e5e7eb; object-fit: cover; }
        .archived-item-card { opacity: 0.7; border: 1px dashed #9ca3af; }
        .archived-badge {
            position: absolute;
            top: 8px;
            left: 8px;
            background-color: rgba(75, 85, 99, 0.8);
            color: white;
            padding: 3px 8px;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 10;
        }
    </style>
</head>
<body class="text-gray-800">
    <header class="bg-white shadow-md sticky top-0 z-50">
        <nav class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <!-- Left Section: Toggle, Logo, Search -->
                <div class="flex items-center gap-4">
                    <!-- Sidebar Toggle Button -->
                    <button id="sidebarToggle" class="p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 lg:hidden">
                        <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>
                    <!-- Logo -->
                    <a href="#" id="logoLink" class="text-xl md:text-2xl font-bold text-blue-600 whitespace-nowrap">CWRU Marketplace</a>
                    <!-- Search Bar -->
                    <div class="hidden md:block relative">
                        <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" /></svg>
                        </span>
                        <input id="searchInput" class="form-input block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-gray-50 text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-1 focus:ring-blue-500 sm:text-sm" placeholder="Search..." type="search">
                    </div>
                </div>
                <!-- Right Section: Actions -->
                <div class="flex items-center">
                    <div id="userActions" class="flex items-center ml-4 space-x-4">
                        <div id="authLinks">
                            <button id="loginRegisterLink" class="text-gray-800 hover:text-blue-600">Login/Register</button>
                        </div>
                        <div id="userLinks" class="hidden space-x-4">
                            <button id="postItemLink" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded hidden">Post Item</button>
                            <button id="myListingsLink" class="text-gray-800 hover:text-blue-600">My Listings</button>
                            <button id="logoutButton" class="text-gray-800 hover:text-blue-600">Logout</button>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <main class="container mx-auto p-4 sm:p-6 lg:p-8 flex flex-row gap-8">
        <!-- Sidebar for Categories -->
        <aside id="categorySidebar" class="w-64 flex-shrink-0 hidden lg:block">
            <div class="sticky top-24 bg-white p-4 rounded-lg shadow-md">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Categories</h3>
                <ul id="categoryList" class="space-y-2">
                    <li><a href="#" data-category="" class="category-link block text-white bg-blue-600 p-2 rounded-md text-sm font-semibold">All Items</a></li>
                    <li><a href="#" data-category="textbooks" class="category-link block text-gray-700 hover:bg-gray-100 hover:text-blue-700 p-2 rounded-md text-sm">Textbooks</a></li>
                    <li><a href="#" data-category="furniture" class="category-link block text-gray-700 hover:bg-gray-100 hover:text-blue-700 p-2 rounded-md text-sm">Furniture</a></li>
                    <li><a href="#" data-category="clothing" class="category-link block text-gray-700 hover:bg-gray-100 hover:text-blue-700 p-2 rounded-md text-sm">Clothing</a></li>
                    <li><a href="#" data-category="electronics" class="category-link block text-gray-700 hover:bg-gray-100 hover:text-blue-700 p-2 rounded-md text-sm">Electronics</a></li>
                    <li><a href="#" data-category="other" class="category-link block text-gray-700 hover:bg-gray-100 hover:text-blue-700 p-2 rounded-md text-sm">Other</a></li>
                </ul>
            </div>
        </aside>

        <!-- Main Content Area -->
        <div class="flex-1">
            <div id="messageBox" class="hidden fixed top-5 right-5 bg-blue-500 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm">
                <p id="messageText"></p>
                <button id="closeMessageButton" class="absolute top-1 right-2 text-xl font-bold">&times;</button>
            </div>

            <section id="homePage" class="page-section active-page">
                <h1 class="text-3xl font-bold mb-8 text-center text-gray-700">Recent Listings</h1>
                <div id="itemGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"></div>
                <div id="noResultsMessage" class="hidden text-center text-gray-500 mt-10"><p class="text-xl">No items found.</p></div>
                <div id="loadingIndicator" class="hidden text-center text-blue-500 mt-10"><p class="text-xl">Loading items...</p></div>
            </section>

            <!-- Rest of your existing sections -->
            // ... existing code ...

            <script>
                // Your existing JavaScript code
                // ... existing code ...

                // --- Sidebar and Category Logic ---
                const sidebarToggle = document.getElementById('sidebarToggle');
                const categorySidebar = document.getElementById('categorySidebar');
                const categoryList = document.getElementById('categoryList');
                let currentCategory = '';

                // Toggle sidebar on mobile
                sidebarToggle?.addEventListener('click', () => {
                    categorySidebar.classList.toggle('hidden');
                });

                // Handle category selection
                categoryList?.addEventListener('click', (e) => {
                    e.preventDefault();
                    const categoryLink = e.target.closest('.category-link');
                    if (!categoryLink) return;

                    // Update active state
                    document.querySelectorAll('.category-link').forEach(link => {
                        link.classList.remove('text-white', 'bg-blue-600');
                        link.classList.add('text-gray-700', 'hover:bg-gray-100', 'hover:text-blue-700');
                    });
                    categoryLink.classList.remove('text-gray-700', 'hover:bg-gray-100', 'hover:text-blue-700');
                    categoryLink.classList.add('text-white', 'bg-blue-600');

                    // Get category and load items
                    const category = categoryLink.dataset.category;
                    currentCategory = category;
                    loadAndRenderItems('', category);

                    // Hide sidebar on mobile after selection
                    if (window.innerWidth < 1024) {
                        categorySidebar.classList.add('hidden');
                    }
                });

                // Update loadAndRenderItems to handle category filtering
                async function loadAndRenderItems(searchTerm = '', categoryTerm = '') {
                    loadingIndicator.classList.remove('hidden');
                    noResultsMessage.classList.add('hidden');
                    itemGrid.innerHTML = '';
                    try {
                        let query = '/items';
                        const params = new URLSearchParams();
                        if (searchTerm) params.append('search', searchTerm);
                        if (categoryTerm) params.append('category', categoryTerm);
                        if (params.toString()) query += `?${params.toString()}`;
                        const response = await fetchApi(query);
                        const items = response.value || response;
                        allItemsCache = items;
                        renderItems(items);
                    } catch (error) {
                        noResultsMessage.classList.remove('hidden');
                        noResultsMessage.querySelector('p').textContent = "Could not load items. Please try again.";
                    } finally {
                        loadingIndicator.classList.add('hidden');
                    }
                }

                // Handle search with category persistence
                searchInput.addEventListener('input', debounce(() => {
                    loadAndRenderItems(searchInput.value.toLowerCase(), currentCategory);
                }, 300));

                // Debounce helper function
                function debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }
            </script>
        </div>
    </main>
</body>
</html> 